generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Game {
  id                         String        @id @default(uuid())
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  name                       String
  gamingService              GamingService
  serviceTitleId             String
  gamePlatforms              String[]
  coverImageUrl              String?
  knownPlayerCount           Int?
  xboxAchievementsSchemaKind String?
  psnServiceName             String?
  isStale                    Boolean?

  achievements         GameAchievement[]
  gameProgressEntities UserGameProgress[]

  @@unique([gamingService, serviceTitleId])
}

model GameAchievement {
  id                    String         @id @default(uuid())
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  serviceAchievementId  String
  name                  String
  description           String?
  vanillaPoints         Int?
  ratioPoints           Int?
  psnGroupId            String?
  psnTrophyKind         PsnTrophyKind?
  sourceImageUrl        String?
  knownEarnerCount      Int?
  knownEarnerPercentage Float?

  game               Game                    @relation(fields: [gameId], references: [id])
  gameId             String
  earnedAchievements UserEarnedAchievement[]

  @@unique([gameId, serviceAchievementId])
}

model User {
  id           String            @id @default(uuid())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  userName     String
  discordId    String?
  syncPriority UserSyncPriority?

  trackedAccounts TrackedAccount[]
}

model UserGameProgress {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  earnedAchievements UserEarnedAchievement[]

  game             Game           @relation(fields: [gameId], references: [id])
  gameId           String
  trackedAccount   TrackedAccount @relation(fields: [trackedAccountId], references: [id])
  trackedAccountId String

  @@unique([trackedAccountId, gameId])
}

model UserEarnedAchievement {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  earnedOn  DateTime?

  achievement          GameAchievement  @relation(fields: [gameAchievementId], references: [id])
  gameAchievementId    String
  gameProgressEntity   UserGameProgress @relation(fields: [gameProgressEntityId], references: [id])
  gameProgressEntityId String
}

model TrackedAccount {
  id               String        @id @default(uuid())
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  gamingService    GamingService
  accountUserName  String
  serviceAccountId String?

  gameProgressEntities UserGameProgress[]

  user          User           @relation(fields: [userId], references: [id])
  userId        String
  trackedEvents TrackedEvent[]

  @@unique([gamingService, accountUserName])
}

model TrackedEvent {
  id        String           @id @default(uuid())
  createdAt DateTime         @default(now())
  kind      TrackedEventKind
  eventData Json

  trackedAccount   TrackedAccount @relation(fields: [trackedAccountId], references: [id])
  trackedAccountId String
}

enum TrackedEventKind {
  RA_NewMastery
  RA_HundredPointAchievementUnlock
  XBOX_NewCompletion
  PSN_NewCompletion
  PSN_NewPlatinum
}

enum GamingService {
  RA
  XBOX
  PSN
}

enum PsnTrophyKind {
  Bronze
  Silver
  Gold
  Platinum
}

enum UserSyncPriority {
  High
}
